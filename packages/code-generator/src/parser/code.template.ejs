const playwright = require("<%= usePlaywrightChromium ? "playwright-chromium" : "playwright" %>");
const path = require("path");

const { CrusherRunnerActions, handlePopup, getBrowserActions, getMainActions, handleProxyBrowserContext, handleProxyPage } = require("<%= runnerUtilsPackagePath %>");

// @TODO: globalManager, logManager, storageManager, exportsManager, communicationChannel are supposed to be injected globally
const crusherRunnerActionManager = new CrusherRunnerActions(logManager, storageManager, "<%= baseAssetsPath %>", globalManager, exportsManager, communicationChannel, null, context);

let capturedVideo, browserContext, page, browser;
<% if (!isPersistentContext) { %>
browser = await playwright["<%= browserName %>"].launch(<%- JSON.stringify(defaultBrowserLaunchOptions) %>);
<% } else { %>
browser = null;
<% } %>

try {
globalManager.set("browserContextOptions", <%- JSON.stringify(defaultBrowserContextOptions) %>);

const actions = <%- JSON.stringify(actions) %>
await crusherRunnerActionManager.runActions(getBrowserActions(actions), browser);

const browserContextOptions = globalManager.get("browserContextOptions");
<% if (isPersistentContext) { %>
browserContext = await playwright["<%= browserName %>"].launchPersistentContext("<%= persistentContextDir %>", {...<%- JSON.stringify(defaultBrowserLaunchOptions) %>,  ...browserContextOptions});
<% } else { %>
browserContext = await browser.newContext({
    ...browserContextOptions,
});
<% } %>
  
<% if (isTracingOn) { %>
await browserContext.tracing.start({ screenshots: true, snapshots: true });
<% } %>
browserContext.setDefaultNavigationTimeout(browserContextOptions.defaultNavigationTimeout);
browserContext.setDefaultTimeout(browserContextOptions.defaultTimeout);

page = await browserContext.newPage();
<% if (proxyUrlsMap) { %>
  try {
  await handleProxyBrowserContext(browserContext, <%- JSON.stringify(proxyUrlsMap) %>);
  } catch(err) {
  console.error(" Error is: ", err);
  }
  <% } %>

<% if (proxyUrlsMap) { %>
  try {
await handleProxyPage(page, <%- JSON.stringify(proxyUrlsMap) %>);
  } catch(err) {
    console.error("Error is", err);
  }
<% } %>
await handlePopup(page, browserContext);


await crusherRunnerActionManager.runActions(getMainActions(actions), browser, page);

  globalManager.set("storageState", await browserContext.storageState().then((storage) => storage).catch((err) => {  return null; }));
} catch(ex) {
  console.error(ex);
  globalManager.set("storageState", await browserContext.storageState().then((storage) => storage).catch((err) => {  return null; }));

  <% if (isTracingOn) { %>

  await browserContext.tracing.stop({ path: '<%= tracePath %>' });
<% } %>
  <% if (shouldRecordVideo) { %>
  globalManager.set("recordedVideoPath", await page.video().path());
  <% } %>
  await page.close();
  await browserContext.close();
  if(browser) {
    await browser.close();
  }
  throw ex;
}

<% if (shouldRecordVideo) { %>
globalManager.set("recordedVideoPath", await page.video().path());
<% } %>
await page.close();
await browserContext.close();
if(browser) {
 await browser.close();
}